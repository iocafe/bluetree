--- egui/code/imgui/imgui_internal.h
+++ egui/code/imgui/imgui_internal.h
@@ -2108,8 +2108,11 @@ struct ImGuiTabBar
 #ifdef IMGUI_HAS_TABLE
 
 #define IM_COL32_DISABLE                IM_COL32(0,0,0,1)   // Special sentinel code which cannot be used as a regular color.
-#define IMGUI_TABLE_MAX_COLUMNS         64                  // sizeof(ImU64) * 8. This is solely because we frequently encode columns set in a ImU64.
-#define IMGUI_TABLE_MAX_DRAW_CHANNELS   (2 + 64 * 2)        // See TableUpdateDrawChannels()
+#ifndef IMGUI_TABLE_MAX_COLUMNS                             // Allow to set this as compile time define
+#define IMGUI_TABLE_MAX_COLUMNS         512                 // PEKKA sizeof(ImU64) * 8. This is solely because we frequently encode columns set in a ImU64.
+#endif
+#define IMGUI_TABLE_MAX_DRAW_CHANNELS   (2 + IMGUI_TABLE_MAX_COLUMNS * 2)        // PEKKA See TableUpdateDrawChannels()
+#define IMGUI_TABLE_MASK_N              ((IMGUI_TABLE_MAX_COLUMNS + 63) / 64)    // PEKKA
 
 // [Internal] sizeof() ~ 100
 // We use the terminology "Visible" to refer to a column that is not Hidden by user or settings. However it may still be out of view and clipped (see IsClipped).
@@ -2137,16 +2140,16 @@ struct ImGuiTableColumn
     bool                    IsClipped;                      // Set when not overlapping the host window clipping rectangle.
     bool                    SkipItems;
     ImGuiNavLayer           NavLayerCurrent;
-    ImS8                    DisplayOrder;                   // Index within Table's IndexToDisplayOrder[] (column may be reordered by users)
-    ImS8                    IndexWithinVisibleSet;          // Index within visible set (<= IndexToDisplayOrder)
-    ImS8                    DrawChannelCurrent;             // Index within DrawSplitter.Channels[]
-    ImS8                    DrawChannelFrozen;
-    ImS8                    DrawChannelUnfrozen;
-    ImS8                    PrevVisibleColumn;              // Index of prev visible column within Columns[], -1 if first visible column
-    ImS8                    NextVisibleColumn;              // Index of next visible column within Columns[], -1 if last visible column
+    ImS16                   DisplayOrder;                   // PEKKA: ImS8->ImS16 Index within Table's IndexToDisplayOrder[] (column may be reordered by users)
+    ImS16                   IndexWithinVisibleSet;          // PEKKA: ImS8->ImS16 Index within visible set (<= IndexToDisplayOrder)
+    ImS16                   DrawChannelCurrent;             // PEKKA: ImS8->ImS16 Index within DrawSplitter.Channels[]
+    ImS16                   DrawChannelFrozen;              // PEKKA: ImS8->ImS16
+    ImS16                   DrawChannelUnfrozen;            // PEKKA: ImS8->ImS16
+    ImS16                   PrevVisibleColumn;              // PEKKA: ImS8->ImS16 Index of prev visible column within Columns[], -1 if first visible column
+    ImS16                   NextVisibleColumn;              // PEKKA: ImS8->ImS16 Index of next visible column within Columns[], -1 if last visible column
     ImS8                    AutoFitQueue;                   // Queue of 8 values for the next 8 frames to request auto-fit
     ImS8                    CannotSkipItemsQueue;           // Queue of 8 values for the next 8 frames to disable Clipped/SkipItem
-    ImS8                    SortOrder;                      // -1: Not sorting on this column
+    ImS16                   SortOrder;                      // PEKKA: ImS8->ImS16 -1: Not sorting on this column
     ImS8                    SortDirection;                  // enum ImGuiSortDirection_
 
     ImGuiTableColumn()
@@ -2233,25 +2236,25 @@ struct ImGuiTable
     ImDrawListSplitter          DrawSplitter;               // We carry our own ImDrawList splitter to allow recursion (FIXME: could be stored outside, worst case we need 1 splitter per recursing table)
     ImVector<ImGuiTableSortSpecsColumn> SortSpecsData;      // FIXME-OPT: Fixed-size array / small-vector pattern, optimize for single sort spec
     ImGuiTableSortSpecs         SortSpecs;                  // Public facing sorts specs, this is what we return in TableGetSortSpecs()
-    ImS8                        SortSpecsCount;
-    ImS8                        DeclColumnsCount;           // Count calls to TableSetupColumn()
-    ImS8                        HoveredColumnBody;          // Index of column whose visible region is being hovered. Important: == ColumnsCount when hovering empty region after the right-most column!
-    ImS8                        HoveredColumnBorder;        // Index of column whose right-border is being hovered (for resizing).
-    ImS8                        ResizedColumn;              // Index of column being resized. Reset when InstanceCurrent==0.
-    ImS8                        LastResizedColumn;          // Index of column being resized from previous frame.
-    ImS8                        HeldHeaderColumn;           // Index of column header being held.
-    ImS8                        ReorderColumn;              // Index of column being reordered. (not cleared)
+    ImS16                       SortSpecsCount;
+    ImS16                       DeclColumnsCount;           // PEKKA: ImS8->ImS16 Count calls to TableSetupColumn()
+    ImS16                       HoveredColumnBody;          // PEKKA: ImS8->ImS16 Index of column whose visible region is being hovered. Important: == ColumnsCount when hovering empty region after the right-most column!
+    ImS16                       HoveredColumnBorder;        // PEKKA: ImS8->ImS16 Index of column whose right-border is being hovered (for resizing).
+    ImS16                       ResizedColumn;              // PEKKA: ImS8->ImS16 Index of column being resized. Reset when InstanceCurrent==0.
+    ImS16                       LastResizedColumn;          // PEKKA: ImS8->ImS16 Index of column being resized from previous frame.
+    ImS16                       HeldHeaderColumn;           // PEKKA: ImS8->ImS16 Index of column header being held.
+    ImS16                       ReorderColumn;              // PEKKA: ImS8->ImS16 Index of column being reordered. (not cleared)
     ImS8                        ReorderColumnDir;           // -1 or +1
-    ImS8                        RightMostVisibleColumn;     // Index of right-most non-hidden column.
-    ImS8                        LeftMostStretchedColumnDisplayOrder; // Display order of left-most stretched column.
-    ImS8                        ContextPopupColumn;         // Column right-clicked on, of -1 if opening context menu from a neutral/empty spot
-    ImS8                        DummyDrawChannel;           // Redirect non-visible columns here.
-    ImS8                        BgDrawChannelUnfrozen;      // Index within DrawSplitter.Channels[]
+    ImS16                       RightMostVisibleColumn;     // PEKKA: ImS8->ImS16 Index of right-most non-hidden column.
+    ImS16                       LeftMostStretchedColumnDisplayOrder; // Display order of left-most stretched column.
+    ImS16                       ContextPopupColumn;         // PEKKA: ImS8->ImS16 Column right-clicked on, of -1 if opening context menu from a neutral/empty spot
+    ImS16                       DummyDrawChannel;           // PEKKA: ImS8->ImS16 Redirect non-visible columns here.
+    ImS16                       BgDrawChannelUnfrozen;      // PEKKA: ImS8->ImS16 Index within DrawSplitter.Channels[]
     ImS8                        FreezeRowsRequest;          // Requested frozen rows count
     ImS8                        FreezeRowsCount;            // Actual frozen row count (== FreezeRowsRequest, or == 0 when no scrolling offset)
-    ImS8                        FreezeColumnsRequest;       // Requested frozen columns count
-    ImS8                        FreezeColumnsCount;         // Actual frozen columns count (== FreezeColumnsRequest, or == 0 when no scrolling offset)
-    ImS8                        RowCellDataCurrent;         // Index of current RowCellData[] entry in current row
+    ImS16                       FreezeColumnsRequest;       // PEKKA: ImS8->ImS16 Requested frozen columns count
+    ImS16                       FreezeColumnsCount;         // PEKKA: ImS8->ImS16 Actual frozen columns count (== FreezeColumnsRequest, or == 0 when no scrolling offset)
+    ImS16                       RowCellDataCurrent;         // PEKKA ImS8->ImS16 Index of current RowCellData[] entry in current row
     bool                        IsLayoutLocked;             // Set by TableUpdateLayout() which is called when beginning the first row.
     bool                        IsInsideRow;                // Set when inside TableBeginRow()/TableEndRow().
     bool                        IsInitializing;
